#!/usr/bin/python
#
# DumbQ - A lightweight job scheduler
# Copyright (C) 2014-2015  Ioannis Charalampidis, PH-SFT, CERN

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

import argparse
import json
import sys
import os

# Locate the dumbq web dir
wwwdir = "/var/www/html"
if 'DUMBQ_WWWROOT' in os.environ:
	wwwdir = os.environ['DUMBQ_WWWROOT']

# Parse arguments
parser = argparse.ArgumentParser(prog="dumbq-metrics", description="Helper utility to update the DumbQ public metrics database, accessible by the end-user application.")
parser.add_argument('--db', nargs="?", metavar="path", action='store', default="%s/metrics.json" % wwwdir,
                   help='Specify the location to the metrics database')
parser.add_argument('--set','-s', nargs=1, metavar="metric=N", action='append',
                   help='Set a particular metric to the specified value')
parser.add_argument('--add','-a', nargs=1, metavar="metric=N", action='append',
                   help='Increment a particular metric by a value')
parser.add_argument('--mul','-m', nargs=1, metavar="metric=N", action='append',
                   help='Multiply a particular metric by a value')
parser.add_argument('--avg','-V', nargs=1, metavar="metric=N", action='append',
                   help='Calculate the average of the specified value')
parser.add_argument('--avg-rotate', nargs=1, metavar="N", action='store', default=10, dest='ring',
                   help='Maximum length of average ring before rotation')
args = parser.parse_args()

# Load database from file
db = { }
if os.path.exists(args.db):
	try:
		with open(args.db, 'r') as f:
			try:
				db = json.loads(f.read())
			except Exception as e:
				db = { }
	except Exception as e:
		sys.stderr.write("ERROR: Unable to open database file %s for reading!\n" % args.db)
		sys.exit(1)

# Execute actions
try:
	error_context = ""

	if args.set:
		error_context = "set"
		for k,v in map(lambda x: str(x[0]).split("=",1), args.set):
			db[k] = v
	if args.add:
		error_context = "add"
		for k,v in map(lambda x: str(x[0]).split("=",1), args.add):
			if '.' in v:
				if not k in db:
					db[k] = float(v)
				else:
					db[k] = float(db[k]) + float(v)
			else:
				if not k in db:
					db[k] = int(v)
				else:
					db[k] = int(db[k]) + int(v)

	if args.mul:
		error_context = "mul"
		for k,v in map(lambda x: str(x[0]).split("=",1), args.mul):
			if '.' in v:
				if not k in db:
					db[k] = float(v)
				else:
					db[k] = float(db[k]) * float(v)
			else:
				if not k in db:
					db[k] = int(v)
				else:
					db[k] = int(db[k]) * int(v)

	if args.avg:
		error_context = "avg"
		for k,v in map(lambda x: str(x[0]).split("=",1), args.avg):

			# Operate on float or int
			if '.' in v:
				v = float(v)
			else:
				v = int(v)

			# If we don't have average values, create them now
			if not '%s_values' % k in db:
				db['%s_values' % k] = []

			# Append and rotate values
			db['%s_values' % k].append( v )
			while len(db['%s_values' % k]) > args.ring:
				del db['%s_values' % k][0]

			# Store values & Update average
			db[k] = sum( db['%s_values' % k] ) / len( db['%s_values' % k] )

except ValueError as e:
	sys.stderr.write("ERROR: Invalid syntax in a '--%s' argument\n" % error_context)
	sys.exit(1)

# Update database
try:
	with open(args.db, 'w') as f:
		f.write(json.dumps(db))
except Exception as e:
	sys.stderr.write("ERROR: Unable to open database file %s for writing!\n" % args.db)
	sys.exit(1)
